-- Тест сегмента лукалайк на лукалайк la_apppr_ccall_2_1.


-- Positive class train
create table user_kposminin.la_la_apppr_segment_pos_id as 
select distinct v.id,v.ymd
from prod_odd.visit_feature v
inner join dds_dic.max_coeff_url_fragment_score ufc on ufc.url_fragment = v.url_fragment
where
  ufc.segment_nm = 'la_apppr_ccall_2_1'
  and ufc.coeff > -7.2
  and v.ymd between '2017-04-17' and '2017-04-30'
;

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 

-- Score urlfr
WITH t AS 
 (
   SELECT
   v.url_fragment AS urlfr
   ,count(distinct if(ta.ymd between v.ymd and date_add(v.ymd,3),ta.id,Null)) as cnt_positive
   ,count(distinct v.id) as cnt_total
  FROM
   prod_odd.visit_feature v
   left join user_kposminin.la_la_apppr_segment_pos_id ta on v.id = ta.id
  WHERE
   v.ymd between '2017-04-17' and '2017-04-27'
   and v.load_src = 'LI.02'
  GROUP BY 
   v.url_fragment
   ) 
INSERT OVERWRITE TABLE 
  user_kposminin.urlfr_tgt_cnt PARTITION (ymd='2017-04-27', target='lala_apppr') 
SELECT 
 urlfr AS urlfr
 ,nvl(cnt_positive, 0) as cnt_positive
 ,cnt_total
 ,log((cnt_positive + 0.1)/(cnt_total - cnt_positive + 0.1)) as score
FROM t 
;


-- la_apppr_ccall2. Url coefs comparison
create table user_kposminin.lala_apppr_test as 
with 
pos_id as
 (
    select distinct v.id,v.ymd
    from prod_odd.visit_feature v
    inner join dds_dic.max_coeff_url_fragment_score ufc on ufc.url_fragment = v.url_fragment
    where
        ufc.segment_nm = 'la_apppr_ccall_2_1'
        and ufc.coeff > -7.2
        and v.ymd between '2017-05-16' and '2017-05-19'
 
 ),
domains_to_exclude as (
   select distinct split(url_fragment,'#')[0] as domain    
   from dds_dic.max_coeff_url_fragment_score ufc
   where
        ufc.segment_nm = 'la_apppr_ccall_2_1'
        and ufc.coeff > -7.2
 )
 

  select 
    v.id, 
    max(if(pid.id is Null,0,1)) as label, 
    max(score) as max_score1, 
    avg(score) as avg_score1,
    count(score) as cnt_score1,
    max(if(de.domain is Null,score,Null)) as max_score2, 
    avg(if(de.domain is Null,score,Null)) as avg_score2,
    count(if(de.domain is Null,score,Null)) as cnt_score2
  from
    prod_odd.visit_feature v
    left join pos_id pid on pid.id = v.id
    left join domains_to_exclude de on split(v.url_fragment,'#')[0] = de.domain
    left join (select urlfr as url_fragment,score from 
               user_kposminin.urlfr_tgt_cnt 
               where ymd='2017-04-27' and target='lala_apppr'
               and ((cnt_total > 4000) or (cnt_positive > 10))
              ) utc on utc.url_fragment = v.url_fragment   
  where
    v.ymd = '2017-05-16' and
    (de.domain is Null)
  group by
    v.id
;

-- -- 


-- lala_apppr. AUC calc
with
  st1 as (select nvl(a.max_score1,-100) as score, a.label as label from user_kposminin.lala_apppr_test a),
  st2 as (select nvl(a.avg_score1,-100) as score, a.label as label from user_kposminin.lala_apppr_test a),
  st3 as (select nvl(a.max_score2,-100) as score, a.label as label from user_kposminin.lala_apppr_test a),
  st4 as (select nvl(a.avg_score2,-100) as score, a.label as label from user_kposminin.lala_apppr_test a),
cs1 as (
  select 
    (1-label) * sum(label) OVER (ORDER BY score DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as sl,
    label * avg(label) OVER (ORDER BY score DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as precision,
    label * log(1 + exp(-score)) + (1 - label) * log(1 + exp(score)) as logloss,
    label
  from st1),
cs2 as (
  select 
    (1-label) * sum(label) OVER (ORDER BY score DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as sl,
    label * avg(label) OVER (ORDER BY score DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as precision,
    label * log(1 + exp(-score)) + (1 - label) * log(1 + exp(score)) as logloss,
    label
  from st2),
cs3 as (
  select 
    (1-label) * sum(label) OVER (ORDER BY score DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as sl,
    label * avg(label) OVER (ORDER BY score DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as precision,
    label * log(1 + exp(-score)) + (1 - label) * log(1 + exp(score)) as logloss,
    label
  from st3),  
cs4 as (
  select 
    (1-label) * sum(label) OVER (ORDER BY score DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as sl,
    label * avg(label) OVER (ORDER BY score DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as precision,
    label * log(1 + exp(-score)) + (1 - label) * log(1 + exp(score)) as logloss,
    label
  from st4)
  
select 
  'max_score1' as name, 
  sum(sl)*1.0/((count(*)-max(sl))*max(sl)) as auc_roc,
  sum(precision)/sum(label) as auc_pr,
  avg(logloss) as logloss,
  sum(label)/count(*) as pos_share,
  count(*) as cnt
from cs1

union all

select 
  'avg_score1' as name, 
  sum(sl)*1.0/((count(*)-max(sl))*max(sl)) as auc_roc,
  sum(precision)/sum(label) as auc_pr,
  avg(logloss) as logloss,
  sum(label)/count(*) as pos_share,
  count(*) as cnt
from cs2


union all

select 
  'max_score1' as name, 
  sum(sl)*1.0/((count(*)-max(sl))*max(sl)) as auc_roc,
  sum(precision)/sum(label) as auc_pr,
  avg(logloss) as logloss,
  sum(label)/count(*) as pos_share,
  count(*) as cnt
from cs3


union all

select 
  'avg_score2' as name, 
  sum(sl)*1.0/((count(*)-max(sl))*max(sl)) as auc_roc,
  sum(precision)/sum(label) as auc_pr,
  avg(logloss) as logloss,
  sum(label)/count(*) as pos_share,
  count(*) as cnt
from cs4

;


-- results:
	_u1.name	_u1.auc_roc	_u1.auc_pr	_u1.logloss	_u1.pos_share	_u1.cnt
0	max_score1	0.83860783731866484	0.028025938088908939	0.0074691990615551769	0.00058157095967443086	230001168
1	avg_score1	0.80603855725185081	0.0023727421063075354	0.0068203689671771338	0.00058157095967443086	230001168
2	max_score1	0.83859791069854472	0.02803927400417074	0.0074691990615559402	0.00058157095967443086	230001168
3	avg_score2	0.80598103454308823	0.0023780703514663195	0.0068203689671771381	0.00058157095967443086	230001168


-- Вывод: все работает. Лучше всего max_score1. Но использовать будем max_score2, там во много раз меньше урл-фрагментов. 
-- У средного скора сильная просадка по auc pr


-- количество
cnt	total_2k	total_3k	total_5k	total_5k_pos_5	total_5k_pos_10	total_5k_pos_20	total_3k_pos_5	total_3k_pos_10	total_3k_pos_20	pos_5	pos_10	pos_20
0	1900911322	783127	531281	324171	792371	482622	370248	891612	636531	564779	722676	372231	193557


select 
  count(*) as cnt,
  sum(if(cnt_total > 2000,1,0)) as total_2k,
  sum(if(cnt_total > 3000,1,0)) as total_3k,
  sum(if(cnt_total > 5000,1,0)) as total_5k,
  sum(if( (cnt_total > 5000) or (cnt_positive > 5), 1, 0)) as total_5k_pos_5,
  sum(if( (cnt_total > 5000) or (cnt_positive > 10), 1, 0)) as total_5k_pos_10,
  sum(if( (cnt_total > 5000) or (cnt_positive > 20), 1, 0)) as total_5k_pos_20,
  sum(if( (cnt_total > 3000) or (cnt_positive > 5), 1, 0)) as total_3k_pos_5,
  sum(if( (cnt_total > 3000) or (cnt_positive > 10), 1, 0)) as total_3k_pos_10,
  sum(if( (cnt_total > 3000) or (cnt_positive > 20), 1, 0)) as total_3k_pos_20,
  sum(if((cnt_positive > 5), 1, 0)) as pos_5,  
  sum(if((cnt_positive > 10), 1, 0)) as pos_10,  
  sum(if((cnt_positive > 20), 1, 0)) as pos_20  
from user_kposminin.urlfr_tgt_cnt 
where ymd='2017-04-27' and target='lala_apppr'
;



-- По итогам добавляем сегмент в боевой тест: 

insert overwrite table dds_dic.max_coeff_url_fragment_score partition (segment_nm = 'lala_apppr_1')
select 
  urlfr as url_fragment,
  score as coeff,
  current_timestamp() as load_dttm
from user_kposminin.urlfr_tgt_cnt 
where ymd='2017-04-27' and target='lala_apppr'
and ((cnt_total > 5000) or (cnt_positive > 10))
;

-- 

-- отсечение
count	 207 001 051   	 115 000 584   	 69 000 350   	 23 000 117   	 11 500 058   	 115 001   	 23 000   	 11 500   
quantile	0,1	0,5	0,7	0,9	0,95	0,9995	0,9999	0,99995
score	-9.973667685673924	-6.240787752394895	-5.736526035378068	-5.082970322841905	-4.398614866957039	-0.6300482121820044	-0.20416547709470864	-0.022644561223663498

-- выбираем -0.2, соответствует 23 тыс в день



