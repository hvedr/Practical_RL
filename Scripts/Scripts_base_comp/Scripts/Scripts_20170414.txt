
-- Факторы по кукам
create table user_kposminin.id_feat_1d_increment as
with mymd as 
 (select
   target,
   max(ymd) as max_ymd
  from
   user_kposminin.urlfr_tgt_cnt
  where 
    ymd < date_add('2017-02-12',-3)
  group by target
 )

select 
 id,
 load_src,
 ymd,
 count(distinct urlfr) as cnt,
 count(*) as visits_cnt,
 sum(cnt) as hits,
 sum(if(urlfr like 'e.mail.ru%',1,0)) as emailru,
 sum(if(urlfr like 'm.%',1,0))/sum(1) as mobile_share,
 sum(if(urlfr rlike '^(m\\.)?vk.com%', 1, 0))/sum(1) as vk_share,
 sum(if(urlfr like 'vk.com%' or urlfr rlike '^(m\\.)?ok\\.ru' or urlfr like 'm.odnoklassniki.ru%' or urlfr rlike '^(m\\.)?my.mail.ru',1,0))/sum(1) as social_share,
 sum(if(avg_hour >= 9 and avg_hour <= 20,cnt,0))/sum(1) as work_hours_hits_share,
 sum( avg_hour * avg_hour) as avg_hour_sum_sq,
 max(score1) as max_score1,
 max(score2) as max_score2,
 max(score3) as max_score3,
 max(score4) as max_score4,
 min(score1) as min_score1,
 min(score2) as min_score2,
 min(score3) as min_score3,
 min(score4) as min_score4,
 sum(score1) as sum_score1,
 sum(score2) as sum_score2,
 sum(score3) as sum_score3,
 sum(score4) as sum_score4, 
 count( if(score1 > 1, urlfr,Null))/sum(1) as good_urlfr_share_score1,
 count( if(score2 > -7, urlfr,Null))/sum(1) as good_urlfr_share_score2,
 count( if(score3 > -7, urlfr,Null))/sum(1) as good_urlfr_share_score3
 
from
 (select
    v.id,
    v.load_src,
    v.ymd,
    v.url_fragment as urlfr,
    unix_timestamp(v.ymd, 'yyyy-MM-dd')/60/60 + v.average_visit_hour  as time_h,
    1 as time_std,
    v.visit_count as cnt,
    v.average_visit_hour as avg_hour,
    t1.score as score1,
    t2.score as score2,
    t3.score as score3,
    t4.score as score4
  from
    prod_odd.visit_feature v
    left semi join (select 
       uid_str as id,
       property_value as phone_num,
       load_src
     from
       prod_dds.md_uid_property 
     where
       property_cd = 'PHONE'
    ) m on m.id = v.id and m.load_src = v.load_src  
    inner join mymd td1 on td1.target = 'ccall_tinkoff_approve_from_fullapp'
    left join (
        select urlfr,score
          from mymd td
         inner join user_kposminin.urlfr_tgt_cnt t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'ccall_tinkoff_approve_from_fullapp'
           and (cnt_total > 30 or cnt_positive > 1)
    ) t1 
    left join (
        select urlfr,score
          from mymd td
         inner join user_kposminin.urlfr_tgt_cnt t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'tinkoff_platinum_approved_application03@cumul_4months'
           and (cnt_total > 120000 or cnt_positive > 40)
    ) t2 
    left join (
        select urlfr,score
          from mymd td
         inner join user_kposminin.urlfr_tgt_cnt t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'tinkoff_platinum_complete_application03@cumul_2months'
           and (cnt_total > 60000 or cnt_positive > 60)
    ) t3 
    left join (
        select urlfr,score
          from mymd td
         inner join user_kposminin.urlfr_tgt_cnt t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'tinkoff_LON_CCR_default'
           and (cnt_total > 10 or cnt_positive > 3)
    ) t4 
  where 
    v.ymd = '2017-02-12' 
 ) a 
group by
  id,load_src,ymd
;



-- join visit dates to correct urlfr_tgt_cnt dates
with tgt_dates as (
  select 
    target, ymd, nvl(lead(ymd, 1) over (partition by target order by ymd ),'2100-01-01') as ymd_next 
  from 
    (select distinct ymd, target from user_kposminin.urlfr_tgt_cnt) a
  )
 select 
   b.target, a.ymd,b.ymd as tgt_ymd 
 from
   (
   select '2015-01-02' as ymd union all
   select '2016-10-02' as ymd union all
   select '2016-08-02' as ymd union all
   select '2016-12-02' as ymd union all
   select '2017-03-02' as ymd 
   ) a
   inner join tgt_dates b
 where
   a.ymd between b.ymd and b.ymd_next

;
 


-- urlfr_scores table filling


with mymd as 
 (
  select
   target,
   max(ymd) as max_ymd
  from
   user_kposminin.urlfr_tgt_cnt
  where 
    ymd < date_add('2017-02-12',-3)
  group by target
 )
insert overwrite table user_kposminin.urlfr_scores partition (ymd,target)
select 
  urlfr, 
  cnt_positive as positive, 
  cnt_total as total,
  score,
  ymd,
  td.target
          from mymd td
         inner join user_kposminin.urlfr_tgt_cnt t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'ccall_tinkoff_approve_from_fullapp'
           and (cnt_total > 30 or cnt_positive > 1)
;


with mymd as 
 (select
   target,
   max(ymd) as max_ymd
  from
   user_kposminin.urlfr_tgt_cnt
  where 
    ymd < date_add('2017-02-12',-3)
  group by target
 )
insert overwrite table user_kposminin.urlfr_scores partition (ymd,target)
select 
  urlfr, 
  cnt_positive as positive, 
  cnt_total as total,
  score,
  ymd,
  td.target
          from mymd td
         inner join user_kposminin.urlfr_tgt_cnt t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'tinkoff_platinum_approved_application03@cumul_4months'
           and (cnt_total > 120000 or cnt_positive > 40)
;


with mymd as 
 (select
   target,
   max(ymd) as max_ymd
  from
   user_kposminin.urlfr_tgt_cnt
  where 
    ymd < date_add('2017-02-12',-3)
  group by target
 )
insert overwrite table user_kposminin.urlfr_scores partition (ymd,target)
select 
  urlfr, 
  cnt_positive as positive, 
  cnt_total as total,
  score,
  ymd,
  td.target
          from mymd td
         inner join user_kposminin.urlfr_tgt_cnt t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'tinkoff_platinum_complete_application03@cumul_2months'
           and (cnt_total > 60000 or cnt_positive > 60)
;


with mymd as 
 (select
   target,
   max(ymd) as max_ymd
  from
   user_kposminin.urlfr_tgt_cnt
  where 
    ymd < date_add('2017-02-12',-3)
  group by target
 )
insert overwrite table user_kposminin.urlfr_scores partition (ymd,target)
select 
  urlfr, 
  cnt_positive as positive, 
  cnt_total as total,
  score,
  ymd,
  td.target
          from mymd td
         inner join user_kposminin.urlfr_tgt_cnt t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'tinkoff_LON_CCR_default'
           and (cnt_total > 10 or cnt_positive > 3)
;


-- urlfr_scores table filling end.



-- Факторы по кукам v2
create table user_kposminin.id_feat_1d_increment as
with mymd as 
 (select
   target,
   max(ymd) as max_ymd
  from
   user_kposminin.urlfr_tgt_cnt
  where 
    ymd < date_add('2017-02-12',-3)
  group by target
 )

select 
 id,
 load_src,
 ymd,
 count(distinct urlfr) as cnt,
 count(*) as visits_cnt,
 sum(cnt) as hits,
 sum(if(urlfr like 'e.mail.ru%',1,0)) as emailru,
 sum(if(urlfr like 'm.%',1,0))/sum(1) as mobile_share,
 sum(if(urlfr rlike '^(m\\.)?vk.com%', 1, 0))/sum(1) as vk_share,
 sum(if(urlfr like 'vk.com%' or urlfr rlike '^(m\\.)?ok\\.ru' or urlfr like 'm.odnoklassniki.ru%' or urlfr rlike '^(m\\.)?my.mail.ru',1,0))/sum(1) as social_share,
 sum(if(avg_hour >= 9 and avg_hour <= 20,cnt,0))/sum(cnt) as work_hours_hits_share,
 sum( avg_hour * avg_hour) as avg_hour_sum_sq,
 max(score1) as max_score1,
 max(score2) as max_score2,
 max(score3) as max_score3,
 max(score4) as max_score4,
 min(score1) as min_score1,
 min(score2) as min_score2,
 min(score3) as min_score3,
 min(score4) as min_score4,
 sum(score1) as sum_score1,
 sum(score2) as sum_score2,
 sum(score3) as sum_score3,
 sum(score4) as sum_score4, 
 count( if(score1 > 1, urlfr,Null))/sum(1) as good_urlfr_share_score1,
 count( if(score2 > -7, urlfr,Null))/sum(1) as good_urlfr_share_score2,
 count( if(score3 > -7, urlfr,Null))/sum(1) as good_urlfr_share_score3
 
from
 (select
    v.id,
    v.load_src,
    v.ymd,
    v.url_fragment as urlfr,
    unix_timestamp(v.ymd, 'yyyy-MM-dd')/60/60 + v.average_visit_hour  as time_h,
    1 as time_std,
    v.visit_count as cnt,
    v.average_visit_hour as avg_hour,
    t1.score as score1,
    t2.score as score2,
    t3.score as score3,
    t4.score as score4
  from
    prod_odd.visit_feature v
    left semi join (select 
       uid_str as id,
       property_value as phone_num,
       load_src
     from
       prod_dds.md_uid_property 
     where
       property_cd = 'PHONE'
    ) m on m.id = v.id and m.load_src = v.load_src  
    left join (
        select urlfr,score
          from mymd td
         inner join user_kposminin.urlfr_scores t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'ccall_tinkoff_approve_from_fullapp'
    ) t1 on t1.urlfr = v.url_fragment
    left join (
        select urlfr,score
          from mymd td
         inner join user_kposminin.urlfr_scores t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'tinkoff_platinum_approved_application03@cumul_4months'
    ) t2 on t2.urlfr = v.url_fragment
    left join (
        select urlfr,score
          from mymd td
         inner join user_kposminin.urlfr_scores t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'tinkoff_platinum_complete_application03@cumul_2months'
    ) t3 on t3.urlfr = v.url_fragment
    left join (
        select urlfr,score
          from mymd td
         inner join user_kposminin.urlfr_scores t on t.target = td.target and t.ymd = td.max_ymd
         where td.target = 'tinkoff_LON_CCR_default'
    ) t4 on t4.urlfr = v.url_fragment
  where 
    v.ymd = '2017-02-12' 
 ) a 
group by
  id,load_src,ymd
;



-- Urlfr_tgt_cnt monthly scores
WITH t AS 
 (
   SELECT
   v.url_fragment AS urlfr
   ,count(distinct if(ta.ymd between v.ymd and date_add(v.ymd,3),ta.id,Null)) as cnt_positive
   ,count(distinct v.id) as cnt_total
  FROM
   prod_odd.visit_feature v
   left join (
     SELECT DISTINCT a.id,a.ymd 
     FROM prod_features_liveinternet.user_action a 
     WHERE a.ymd between date_add('2017-04-01', -30) and date_add('2017-04-01',3) 
       and a.action_type = 'tinkoff_platinum_approved_application'
   ) ta on v.id = ta.id
  WHERE
   v.ymd between date_add('2017-04-01', -30) and '2017-04-01'
   and v.load_src = 'LI.02'
  GROUP BY 
   v.url_fragment
   ) 
INSERT OVERWRITE TABLE 
  user_kposminin.urlfr_tgt_cnt PARTITION (ymd='2017-04-01', target='tinkoff_platinum_approved_application03@1month') 
SELECT 
 urlfr AS urlfr
 ,nvl(cnt_positive, 0) as cnt_positive
 ,cnt_total
 ,log((cnt_positive + 0.1)/(cnt_total - cnt_positive + 0.1)) as score
FROM t 
;



-- Соотношение кук и телефонов
SELECT 
  count(*) as cnt,
  COUNT(distinct v.id,v.load_src) as id_cnt,
  count(distinct m.phone_num) as phone_cnt
from
  id_feat_1d_20170214 v
  inner join
     (select 
       uid_str as id,
       property_value as phone_num,
       load_src
     from
       prod_dds.md_uid_property 
     where
       property_cd = 'PHONE'
    ) m on m.id = v.id and m.load_src = v.load_src  
 ;
 
 	cnt		id_cnt		phone_cnt
	28963465	16078344	23329318

Оказывается, телефонов больше, чем кук.



-- аккумулятор
create table user_kposminin.id_feat_accum_upd as
select
 nvl(a.id,b.id) as id,
 nvl(a.load_src,b.load_src) as load_src,
min(a.ymd,b.ymd) as first_ymd,
max(a.ymd,b.ymd) as last_ymd,
nvl(a.ymd_cnt,0) + if(b.ymd is Null,0,1) as ymd_cnt,
nvl(a.cnt,0) + nvl(b.cnt,0) as cnt,
nvl(a.visits_cnt,0) + nvl(b.visits_cnt,0) as visits_cnt,
nvl(a.hits,0) + nvl(b.hits,0) as hits,
nvl(a.emailru,0) + nvl(b.emailru,0) as emailru,

(nvl(a.mobile_share * a.visits_cnt,0) + nvl(b.mobile_share * b.visits_cnt,0)) / (nvl(a.visits_cnt,0) + nvl(b.visits_cnt,0)) as mobile_share,
(nvl(a.vk_share * a.visits_cnt,0) + nvl(b.vk_share * b.visits_cnt,0)) / (nvl(a.visits_cnt,0) + nvl(b.visits_cnt,0)) as vk_share,
(nvl(a.social_share * a.visits_cnt,0) + nvl(b.social_share * b.visits_cnt,0)) / (nvl(a.visits_cnt,0) + nvl(b.visits_cnt,0)) as social_share,
(nvl(a.work_hours_hits_share * a.visits_cnt,0) + nvl(b.work_hours_hits_share * b.visits_cnt,0)) / (nvl(a.visits_cnt,0) + nvl(b.visits_cnt,0)) as work_hours_hits_share,

nvl(a.avg_hour_sum_sq,0) + nvl(b.avg_hour_sum_sq,0) as avg_hour_sum_sq,

greatest(a.max_score1,b.max_score1) as max_score1,
greatest(a.max_score2,b.max_score2) as max_score2,
greatest(a.max_score3,b.max_score3) as max_score3,
greatest(a.max_score4,b.max_score4) as max_score4,
least(a.max_score1,b.max_score1) as min_score1,
least(a.max_score2,b.max_score2) as min_score2,
least(a.max_score3,b.max_score3) as min_score3,
least(a.max_score4,b.max_score4) as min_score4,
nvl(a.sum_score1,0) + nvl(b.sum_score1,0) as sum_score1,
nvl(a.sum_score2,0) + nvl(b.sum_score2,0) as sum_score2,
nvl(a.sum_score3,0) + nvl(b.sum_score3,0) as sum_score3,
nvl(a.sum_score4,0) + nvl(b.sum_score4,0) as sum_score4,

(nvl(a.good_urlfr_share_score1 * a.visits_cnt,0) + nvl(b.good_urlfr_share_score1 * b.visits_cnt,0)) / (nvl(a.visits_cnt,0) + nvl(b.visits_cnt,0)) as good_urlfr_share_score1,
(nvl(a.good_urlfr_share_score2 * a.visits_cnt,0) + nvl(b.good_urlfr_share_score2 * b.visits_cnt,0)) / (nvl(a.visits_cnt,0) + nvl(b.visits_cnt,0)) as good_urlfr_share_score2,
(nvl(a.good_urlfr_share_score3 * a.visits_cnt,0) + nvl(b.good_urlfr_share_score3 * b.visits_cnt,0)) / (nvl(a.visits_cnt,0) + nvl(b.visits_cnt,0)) as good_urlfr_share_score3


from 
  user_kposminin.id_feat_accum a
  full join user_kposminin.id_feat_1d_20170212 b on a.id = b.id and a.load_src = b.load_src
;
    
    





 
 