{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def setParams():\n",
    "    print('''set hive.vectorized.execution.enabled=true;\n",
    "set mapreduce.map.memory.mb=4096;\n",
    "set mapreduce.map.child.java.opts=-Xmx4g;\n",
    "set mapreduce.task.io.sort.mb=1024;\n",
    "set mapreduce.reduce.child.java.opts=-Xmx4g;\n",
    "set mapreduce.reduce.memory.mb=7000;\n",
    "set mapreduce.reduce.shuffle.input.buffer.percent=0.5;\n",
    "set mapreduce.input.fileinputformat.split.minsize=536870912;\n",
    "set mapreduce.input.fileinputformat.split.maxsize=1073741824;\n",
    "set hive.optimize.ppd=true;\n",
    "set hive.merge.smallfiles.avgsize=536870912;\n",
    "set hive.merge.mapredfiles=true;\n",
    "set hive.merge.mapfiles=true;\n",
    "set hive.hadoop.supports.splittable.combineinputformat=true;\n",
    "set hive.exec.reducers.bytes.per.reducer=536870912;\n",
    "set hive.exec.parallel=true;\n",
    "set hive.exec.max.created.files=10000000;\n",
    "set hive.exec.compress.output=true;\n",
    "set hive.exec.dynamic.partition.mode=nonstrict;\n",
    "set hive.exec.max.dynamic.partitions=1000000;\n",
    "set hive.exec.max.dynamic.partitions.pernode=100000;\n",
    "set io.seqfile.compression.type=BLOCK;\n",
    "''')\n",
    "\n",
    "\n",
    "\n",
    "sql_urlf_tgt_cnt_ccalls_monthly_stat = '''WITH t AS (\n",
    "  SELECT \n",
    "      v.urlfr AS urlfr,\n",
    "      COUNT(distinct if(m.approve = 1,m.phone_num,Null)) AS cnt_approve,\n",
    "      COUNT(distinct if(m.full_app = 1,m.phone_num,Null)) AS cnt_full_app,\n",
    "      count(distinct m.phone_num) as cnt_ccall\n",
    "  FROM (select ymd,urlfr,id from prod_features_liveinternet.visits where (ymd between '{d_month_ago}' and '{d}')) v\n",
    "  inner join user_kposminin.cold_calls_matched_5 m on m.id = v.id and m.ymd = '{next_d}' and m.havent_started = 0\n",
    "  GROUP BY v.urlfr\n",
    ")\n",
    "INSERT OVERWRITE TABLE user_kposminin.urlfr_tgt_cnt_ccall\n",
    "PARTITION (ymd='{d}', target='ccall_monthly_phone')\n",
    "SELECT t.urlfr AS urlfr, nvl(t.cnt_approve, 0) as cnt_approve, nvl(t.cnt_full_app, 0) as cnt_full_app, t.cnt_ccall as cnt_ccall\n",
    "FROM t where cnt_ccall > 5;\n",
    "'''\n",
    "\n",
    "sql_urlf_tgt_cnt_ccalls_monthly_stat2 = '''WITH t AS (\n",
    "  SELECT \n",
    "      m.ymd,\n",
    "      v.urlfr AS urlfr,\n",
    "      COUNT(distinct if(m.approve = 1,m.phone_num,Null)) AS cnt_approve,\n",
    "      COUNT(distinct if(m.full_app = 1,m.phone_num,Null)) AS cnt_full_app,\n",
    "      count(distinct m.phone_num) as cnt_ccall\n",
    "  FROM (select ymd,urlfr,id from prod_features_liveinternet.visits where (ymd between '{d_two_months_ago}' and '{d}')) v\n",
    "  inner join user_kposminin.cold_calls_matched_5 m on m.id = v.id \n",
    "  where \n",
    "    m.ymd between '{d_month_ago}' and '{d}'\n",
    "    and m.havent_started = 0\n",
    "    and v.ymd between date_add(m.ymd,-31) and date_add(m.ymd,-1)\n",
    "  GROUP BY m.ymd, v.urlfr\n",
    ")\n",
    "INSERT OVERWRITE TABLE user_kposminin.urlfr_tgt_cnt_ccall\n",
    "PARTITION (ymd, target)\n",
    "SELECT \n",
    "  t.urlfr AS urlfr\n",
    ", nvl(t.cnt_approve, 0) as cnt_approve\n",
    ", nvl(t.cnt_full_app, 0) as cnt_full_app\n",
    ", t.cnt_ccall as cnt_ccall\n",
    ", t.ymd\n",
    ", 'ccall_monthly_phone' as target\n",
    "FROM t where cnt_ccall > 5;\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "setParams()\n",
    "import datetime\n",
    "action_type = 'tinkoff_platinum_cold_call_approved'\n",
    "target = 'my_ccalls' #action_type + '@tinkoff_action@my'\n",
    "first_date = '2016-07-01'\n",
    "next_day = datetime.datetime.strptime(first_date, \"%Y-%m-%d\")\n",
    "d = next_day\n",
    "while d.month == next_day.month:\n",
    "    d = next_day\n",
    "    next_day += datetime.timedelta(days=1)\n",
    "    print(sql_urlf_tgt_cnt_ccalls_monthly_stat2.format(\n",
    "            d = d.strftime(\"%Y-%m-%d\"), \n",
    "            next_d = next_day.strftime(\"%Y-%m-%d\"), \n",
    "            d_month_ago = (d - datetime.timedelta(days = 30)).strftime(\"%Y-%m-%d\"), \n",
    "            d_two_months_ago = (d - datetime.timedelta(days = 61)).strftime(\"%Y-%m-%d\"), \n",
    "            target = target, \n",
    "            action_type = action_type\n",
    "    ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "setParams()\n",
    "import datetime\n",
    "action_type = 'tinkoff_platinum_cold_call_approved'\n",
    "target = 'my_ccalls' #action_type + '@tinkoff_action@my'\n",
    "first_date = '2016-02-01'\n",
    "d = datetime.datetime.strptime(first_date, \"%Y-%m-%d\")\n",
    "d = next_day\n",
    "for rd in ['2016-02-28','2016-06-30','2016-07-31']:\n",
    "    d = datetime.datetime.strptime(rd, \"%Y-%m-%d\")\n",
    "    print(sql_urlf_tgt_cnt_ccalls_monthly_stat2.format(\n",
    "            d = d.strftime(\"%Y-%m-%d\"), \n",
    "            next_d = next_day.strftime(\"%Y-%m-%d\"), \n",
    "            d_month_ago = (d - datetime.timedelta(days = 30)).strftime(\"%Y-%m-%d\"), \n",
    "            d_two_months_ago = (d - datetime.timedelta(days = 61)).strftime(\"%Y-%m-%d\"), \n",
    "            target = target, \n",
    "            action_type = action_type\n",
    "    ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "setParams()\n",
    "action_type = 'tinkoff_platinum_cold_call_approved'\n",
    "target = action_type + '@tinkoff_action'\n",
    "first_date = '2016-04-01'\n",
    "next_day = datetime.datetime.strptime(first_date, \"%Y-%m-%d\")\n",
    "d = next_day\n",
    "while d.month == next_day.month:\n",
    "    d = next_day\n",
    "    next_day += datetime.timedelta(days=1)\n",
    "    print(sql_urlf_tgt_cnt_full_sample_weekly.format(\n",
    "            d = d.strftime(\"%Y-%m-%d\"), \n",
    "            next_d = next_day.strftime(\"%Y-%m-%d\"), \n",
    "            d_week_ago = (d + datetime.timedelta(days=-7)).strftime(\"%Y-%m-%d\"), \n",
    "            target = target, \n",
    "            action_type = action_type\n",
    "    ).replace('\\n', ' '))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "create_visits_table_query = '''\n",
    "create table if not exists user_kposminin.ccalls_visits_1(\n",
    "phone_num String,\n",
    "id String,\n",
    "label int,\n",
    "full_app int,\n",
    "visit_lag int,\n",
    "urlfr String,\n",
    "avg_hour int,\n",
    "duration int,\n",
    "cnt int\n",
    ")\n",
    "partitioned by (ymd String) \n",
    "; \n",
    "'''\n",
    "\n",
    "ccall_visits_query = '''\n",
    "insert overwrite table user_kposminin.ccalls_visits_1 partition(ymd)\n",
    "select \n",
    "  m.phone_num\n",
    ", m.id\n",
    ", m.approve as label\n",
    ", m.full_app\n",
    ", datediff(m.ymd, v.ymd) as visit_lag\n",
    ", v.urlfr\n",
    ", v.avg_hour\n",
    ", v.duration\n",
    ", v.cnt\n",
    ", m.ymd as ymd\n",
    "from\n",
    "  (select id, urlfr,cnt, duration, avg_hour, ymd from prod_features_liveinternet.visits where ymd between date_add('#d',-20) and date_add('#d',-1)) v\n",
    "inner join (select phone_num, id, approve, full_app, ymd from user_kposminin.cold_calls_matched_5 where ymd = '#d') m on m.id = v.id\n",
    ";\n",
    "'''\n",
    "import datetime\n",
    "setParams()\n",
    "print(create_visits_table_query)\n",
    "first_date = '2016-01-01'\n",
    "next_day = datetime.datetime.strptime(first_date, \"%Y-%m-%d\")\n",
    "d = next_day\n",
    "while d.month == next_day.month:\n",
    "    d = next_day\n",
    "    next_day += datetime.timedelta(days=1)\n",
    "    print(ccall_visits_query.replace('#d', d.strftime(\"%Y-%m-%d\")).replace('\\n', ' '))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ccall_visits_query = '''\n",
    "insert overwrite table user_kposminin.ccalls_visits_1 partition(ymd)\n",
    "select \n",
    "  m.phone_num\n",
    ", m.id\n",
    ", datediff(m.ymd, v.ymd) as visit_lag\n",
    ", v.urlfr\n",
    ", v.avg_hour\n",
    ", v.duration\n",
    ", v.cnt\n",
    ", m.ymd as ymd\n",
    "from\n",
    "  (select id, urlfr,cnt, duration, avg_hour, ymd from prod_features_liveinternet.visits where ymd between date_add('#d',-30) and date_add('#d',-1)) v\n",
    "inner join (select phone_num, id, ymd from user_kposminin.cold_calls_test_matched where ymd = '#d') m on m.id = v.id\n",
    ";\n",
    "'''\n",
    "import datetime\n",
    "setParams()\n",
    "print(create_visits_table_query)\n",
    "first_date = '2016-01-01'\n",
    "next_day = datetime.datetime.strptime(first_date, \"%Y-%m-%d\")\n",
    "d = next_day\n",
    "while d.month == next_day.month:\n",
    "    d = next_day\n",
    "    next_day += datetime.timedelta(days=1)\n",
    "    print(ccall_visits_query.replace('#d', d.strftime(\"%Y-%m-%d\")).replace('\\n', ' '))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
