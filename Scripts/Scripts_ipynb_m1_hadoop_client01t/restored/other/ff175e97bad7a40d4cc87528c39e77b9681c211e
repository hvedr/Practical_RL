{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import datetime\n",
    "from pyspark import SparkConf, SparkContext, HiveContext\n",
    "sc.stop()\n",
    "conf = SparkConf().set(\"spark.executor.instances\", 32).set(\"spark.driver.maxResultSize\", \"16g\")\n",
    "sc = SparkContext(conf=conf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "End. Time of work 0:01:46.149420.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def repart(filename):\n",
    "    starttime = datetime.datetime.now()\n",
    "    sc.textFile(filename).repartition(32*3).saveAsTextFile('.'.join(filename.split('.')[:-1]))\n",
    "    print('End. Time of work {0}.'.format(datetime.datetime.now() - starttime))\n",
    "repart(\"/user/kposminin/la_20160824.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from pyspark.mllib.tree import GradientBoostedTrees, GradientBoostedTreesModel\n",
    "from pyspark.mllib.util import MLUtils\n",
    "from pyspark.mllib.regression import LabeledPoint\n",
    "from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
    "import sklearn\n",
    "\n",
    "# Load and parse the data file.\n",
    "train = sc.textFile(\"/user/kposminin/la_20160817\").map(lambda r:r.split('\\t')) \\\n",
    "  .map(lambda r: LabeledPoint(int(r[0]), [int(e) for e in r[1:]]))\n",
    "test = sc.textFile(\"/user/kposminin/la_20160824\").map(lambda r:r.split('\\t')) \\\n",
    "  .map(lambda r: LabeledPoint(int(r[0]), [int(e) for e in r[1:]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "columns = '''smax ,savg ,ssum ,smedian ,sstd ,cntrepeat ,cntuniq \n",
    ",duration ,mobile ,emailru ,vkru ,okru ,social_other , s1 ,s2 ,s3 ,s4 ,s5 ,s6 ,s7 ,s8 ,s9 ,s10 , \n",
    "sm1 ,sm2 ,sm3 ,sm4 ,sm5'''.replace(' ','').replace('\\n','').split(',')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\n",
    "# Train a GradientBoostedTrees model.\n",
    "#  Notes: (a) Empty categoricalFeaturesInfo indicates all features are continuous.\n",
    "#         (b) Use more iterations in practice.\n",
    "train.cache()\n",
    "model = GradientBoostedTrees.trainClassifier(train, maxDepth = 4,\n",
    "                                             categoricalFeaturesInfo={}, numIterations = 200)\n",
    "\n",
    "# Evaluate model on test instances and compute test error\n",
    "predictions = model.predict(test.map(lambda x: x.features))\n",
    "predictionAndLabels = test.map(lambda lp: (float(model.predict(lp.features)), lp.label))\n",
    "\n",
    "# Instantiate metrics object\n",
    "metrics = BinaryClassificationMetrics(predictionAndLabels)\n",
    "\n",
    "testErr = predictionAndLabels.filter(lambda (p, v): v != p).count() / float(test.count())\n",
    "print('Test Error = ' + str(testErr))\n",
    "\n",
    "# Area under precision-recall curve\n",
    "print(\"Area under PR = %s\" % metrics.areaUnderPR)\n",
    "\n",
    "# Area under ROC curve\n",
    "print(\"Area under ROC = %s\" % metrics.areaUnderROC)\n",
    "\n",
    "#print('Learned classification GBT model:')\n",
    "#print(model.toDebugString())\n",
    "#print('AUCROC: {0}'.format(sklearn.metrics.roc_auc_score(\n",
    "#            labelsAndPredictions.map(lambda r:r[0]).collect(),\n",
    "#            labelsAndPredictions.map(lambda r:r[1]).collect()\n",
    "#)))\n",
    "\n",
    "\n",
    "# Save and load model\n",
    "#model.save(sc, \"target/tmp/myGradientBoostingClassificationModel\")\n",
    "#sameModel = GradientBoostedTreesModel.load(sc,\n",
    "#                                           \"target/tmp/myGradientBoostingClassificationModel\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0, 0.8694831572078038, 0.8899257108586199], [1, 0.8284951932494778, 0.8731618675881182], [2, 0.17619472780254214, 0.23471700489113687], [3, 0.721228410762082, 0.8023843898169678], [4, 0.5673219868455786, 0.6281227462011677], [5, 0.7987163777443258, 0.7466076000930905], [6, 0.8342195369645913, 0.786882478233601], [7, 0.7217504060539238, 0.691652498181809], [8, 0.3962075439804844, 0.4121651624419434], [9, 0.6065581223631629, 0.6060555544227098], [10, 0.5406136512961196, 0.5633067557804768], [11, 0.43835219012350646, 0.44325166438437813], [12, 0.5096370938197332, 0.5049174157348549], [13, 0.8604298690863115, 0.8874371248932271], [14, 0.855571535863127, 0.8652096644595517], [15, 0.8499561905702552, 0.8566278417032767], [16, 0.8430251691693722, 0.8455197644710627], [17, 0.8342015385715703, 0.8301906189859122], [18, 0.8255658052159578, 0.8210381190287607], [19, 0.8178596486239349, 0.8048330145043164], [20, 0.8081042098619317, 0.7972637430602864], [21, 0.8006897736798152, 0.7908729116066111], [22, 0.790997281875985, 0.7806453838789341], [23, 0.804002939691541, 0.8046383609391005], [24, 0.6233315762063212, 0.653707460365217], [25, 0.547125257127861, 0.6024745259799916], [26, 0.514149423225903, 0.5935707789626098], [27, 0.5187222374666145, 0.5976079570427603]]\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "AUCROC = []\n",
    "for i in range(28):\n",
    "    mtrain = BinaryClassificationMetrics(train.map(lambda lp: (float(lp.features[i]),lp.label)))\n",
    "    mtest = BinaryClassificationMetrics(test.map(lambda lp: (float(lp.features[i]),lp.label)))\n",
    "    AUCROC.append([i,mtrain.areaUnderROC,mtest.areaUnderROC])\n",
    "#print(\"smax train AUCROC = %s\" % mtrain.areaUnderROC)\n",
    "#print(\"smax test AUCROC = %s\" % mtest.areaUnderROC)\n",
    "print(AUCROC)\n",
    "open('res_auc.txt','w').write(str(AUCROC))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>train</th>\n",
       "      <th>test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>smax</th>\n",
       "      <td>0</td>\n",
       "      <td>0.869483</td>\n",
       "      <td>0.889926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>savg</th>\n",
       "      <td>1</td>\n",
       "      <td>0.828495</td>\n",
       "      <td>0.873162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ssum</th>\n",
       "      <td>2</td>\n",
       "      <td>0.176195</td>\n",
       "      <td>0.234717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smedian</th>\n",
       "      <td>3</td>\n",
       "      <td>0.721228</td>\n",
       "      <td>0.802384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sstd</th>\n",
       "      <td>4</td>\n",
       "      <td>0.567322</td>\n",
       "      <td>0.628123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cntrepeat</th>\n",
       "      <td>5</td>\n",
       "      <td>0.798716</td>\n",
       "      <td>0.746608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cntuniq</th>\n",
       "      <td>6</td>\n",
       "      <td>0.834220</td>\n",
       "      <td>0.786882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>duration</th>\n",
       "      <td>7</td>\n",
       "      <td>0.721750</td>\n",
       "      <td>0.691652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mobile</th>\n",
       "      <td>8</td>\n",
       "      <td>0.396208</td>\n",
       "      <td>0.412165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>emailru</th>\n",
       "      <td>9</td>\n",
       "      <td>0.606558</td>\n",
       "      <td>0.606056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vkru</th>\n",
       "      <td>10</td>\n",
       "      <td>0.540614</td>\n",
       "      <td>0.563307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>okru</th>\n",
       "      <td>11</td>\n",
       "      <td>0.438352</td>\n",
       "      <td>0.443252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>social_other</th>\n",
       "      <td>12</td>\n",
       "      <td>0.509637</td>\n",
       "      <td>0.504917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s1</th>\n",
       "      <td>13</td>\n",
       "      <td>0.860430</td>\n",
       "      <td>0.887437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s2</th>\n",
       "      <td>14</td>\n",
       "      <td>0.855572</td>\n",
       "      <td>0.865210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s3</th>\n",
       "      <td>15</td>\n",
       "      <td>0.849956</td>\n",
       "      <td>0.856628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s4</th>\n",
       "      <td>16</td>\n",
       "      <td>0.843025</td>\n",
       "      <td>0.845520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s5</th>\n",
       "      <td>17</td>\n",
       "      <td>0.834202</td>\n",
       "      <td>0.830191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s6</th>\n",
       "      <td>18</td>\n",
       "      <td>0.825566</td>\n",
       "      <td>0.821038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s7</th>\n",
       "      <td>19</td>\n",
       "      <td>0.817860</td>\n",
       "      <td>0.804833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s8</th>\n",
       "      <td>20</td>\n",
       "      <td>0.808104</td>\n",
       "      <td>0.797264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s9</th>\n",
       "      <td>21</td>\n",
       "      <td>0.800690</td>\n",
       "      <td>0.790873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>s10</th>\n",
       "      <td>22</td>\n",
       "      <td>0.790997</td>\n",
       "      <td>0.780645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sm1</th>\n",
       "      <td>23</td>\n",
       "      <td>0.804003</td>\n",
       "      <td>0.804638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sm2</th>\n",
       "      <td>24</td>\n",
       "      <td>0.623332</td>\n",
       "      <td>0.653707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sm3</th>\n",
       "      <td>25</td>\n",
       "      <td>0.547125</td>\n",
       "      <td>0.602475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sm4</th>\n",
       "      <td>26</td>\n",
       "      <td>0.514149</td>\n",
       "      <td>0.593571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sm5</th>\n",
       "      <td>27</td>\n",
       "      <td>0.518722</td>\n",
       "      <td>0.597608</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              index     train      test\n",
       "smax              0  0.869483  0.889926\n",
       "savg              1  0.828495  0.873162\n",
       "ssum              2  0.176195  0.234717\n",
       "smedian           3  0.721228  0.802384\n",
       "sstd              4  0.567322  0.628123\n",
       "cntrepeat         5  0.798716  0.746608\n",
       "cntuniq           6  0.834220  0.786882\n",
       "duration          7  0.721750  0.691652\n",
       "mobile            8  0.396208  0.412165\n",
       "emailru           9  0.606558  0.606056\n",
       "vkru             10  0.540614  0.563307\n",
       "okru             11  0.438352  0.443252\n",
       "social_other     12  0.509637  0.504917\n",
       "s1               13  0.860430  0.887437\n",
       "s2               14  0.855572  0.865210\n",
       "s3               15  0.849956  0.856628\n",
       "s4               16  0.843025  0.845520\n",
       "s5               17  0.834202  0.830191\n",
       "s6               18  0.825566  0.821038\n",
       "s7               19  0.817860  0.804833\n",
       "s8               20  0.808104  0.797264\n",
       "s9               21  0.800690  0.790873\n",
       "s10              22  0.790997  0.780645\n",
       "sm1              23  0.804003  0.804638\n",
       "sm2              24  0.623332  0.653707\n",
       "sm3              25  0.547125  0.602475\n",
       "sm4              26  0.514149  0.593571\n",
       "sm5              27  0.518722  0.597608"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df_AUCROC = pd.DataFrame(AUCROC,index = columns,columns = ['index','train','test'])\n",
    "\n",
    "def table_to_html(table):\n",
    "    ''' Take 2d list as arg'''\n",
    "    return '<table><tr>'+'</td></tr><tr><td>'.join(['</td><td>'.join([str(e) for e in r]) for r in table]) +'</td></tr></table>'\n",
    "def row_major(alist, sublen):      \n",
    "  return [alist[i:i+sublen] for i in range(0, len(alist), sublen)]\n",
    "\n",
    "df_AUCROC\n",
    "#table_to_html([['param','i','train','test']]+[[r[0],c,r[1],r[2]] for (c,r) in zip(columns,AUCROC)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "savg test AUCROC = 0.873161867588\n"
     ]
    }
   ],
   "source": [
    "#mtrain = BinaryClassificationMetrics(train.map(lambda lp: (float(lp.features[1]),lp.label)))\n",
    "mtest = BinaryClassificationMetrics(test.map(lambda lp: (float(lp.features[1]),lp.label)))\n",
    "#print(\"savg train AUCROC = %s\" % mtrain.areaUnderROC)\n",
    "print(\"savg test AUCROC = %s\" % mtest.areaUnderROC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Error = 4.46081634146e-06\n",
      "Learned classification GBT model:\n",
      "TreeEnsembleModel classifier with 3 trees\n",
      "\n",
      "  Tree 0:\n",
      "    If (feature 21 <= -636475.0)\n",
      "     If (feature 1 <= -348819.0)\n",
      "      If (feature 16 <= -421010.0)\n",
      "       Predict: -1.0\n",
      "      Else (feature 16 > -421010.0)\n",
      "       Predict: -0.9999822380035333\n",
      "     Else (feature 1 > -348819.0)\n",
      "      If (feature 16 <= -421010.0)\n",
      "       Predict: -1.0\n",
      "      Else (feature 16 > -421010.0)\n",
      "       Predict: -0.9997001703032677\n",
      "    Else (feature 21 > -636475.0)\n",
      "     If (feature 23 <= -1121762.0)\n",
      "      If (feature 23 <= -1221988.0)\n",
      "       Predict: -0.999987214352226\n",
      "      Else (feature 23 > -1221988.0)\n",
      "       Predict: -0.9998206484378863\n",
      "     Else (feature 23 > -1121762.0)\n",
      "      If (feature 2 <= -6.0640101E7)\n",
      "       Predict: -0.9722650231124808\n",
      "      Else (feature 2 > -6.0640101E7)\n",
      "       Predict: -0.9994552068441773\n",
      "  Tree 1:\n",
      "    If (feature 1 <= -604519.0)\n",
      "     If (feature 21 <= -625575.0)\n",
      "      If (feature 27 <= -1080549.0)\n",
      "       Predict: -0.47681251680415304\n",
      "      Else (feature 27 > -1080549.0)\n",
      "       Predict: -0.476805745938948\n",
      "     Else (feature 21 > -625575.0)\n",
      "      If (feature 23 <= -1114115.0)\n",
      "       Predict: -0.4767799606871262\n",
      "      Else (feature 23 > -1114115.0)\n",
      "       Predict: -0.47383448831962355\n",
      "    Else (feature 1 > -604519.0)\n",
      "     If (feature 4 <= 0.0)\n",
      "      If (feature 27 <= -563511.0)\n",
      "       Predict: -0.47666434933511787\n",
      "      Else (feature 27 > -563511.0)\n",
      "       Predict: -0.47349343556584067\n",
      "     Else (feature 4 > 0.0)\n",
      "      If (feature 9 <= 0.0)\n",
      "       Predict: -0.4767567714566622\n",
      "      Else (feature 9 > 0.0)\n",
      "       Predict: -0.4764776572453655\n",
      "  Tree 2:\n",
      "    If (feature 19 <= -649375.0)\n",
      "     If (feature 1 <= -351724.0)\n",
      "      If (feature 1 <= -466698.0)\n",
      "       Predict: -0.43819315840722445\n",
      "      Else (feature 1 > -466698.0)\n",
      "       Predict: -0.43816140337369297\n",
      "     Else (feature 1 > -351724.0)\n",
      "      If (feature 4 <= 0.0)\n",
      "       Predict: -0.43789318697110025\n",
      "      Else (feature 4 > 0.0)\n",
      "       Predict: -0.4382200194470485\n",
      "    Else (feature 19 > -649375.0)\n",
      "     If (feature 23 <= -1153501.0)\n",
      "      If (feature 23 <= -1264578.0)\n",
      "       Predict: -0.4382007288444008\n",
      "      Else (feature 23 > -1264578.0)\n",
      "       Predict: -0.4380903302866459\n",
      "     Else (feature 23 > -1153501.0)\n",
      "      If (feature 2 <= -5.7884163E7)\n",
      "       Predict: -0.4247593664832495\n",
      "      Else (feature 2 > -5.7884163E7)\n",
      "       Predict: -0.4377209224147553\n",
      "\n",
      "AUCROC: 0.5\n"
     ]
    }
   ],
   "source": [
    "print('Test Error = ' + str(testErr))\n",
    "print('Learned classification GBT model:')\n",
    "#print(model.toDebugString())\n",
    "print('AUCROC: {0}'.format(sklearn.metrics.roc_auc_score(\n",
    "            labelsAndPredictions.map(lambda r:r[0]).collect(),\n",
    "            labelsAndPredictions.map(lambda r:r[1]).collect()\n",
    ")))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUCROC smax: 0.726966198686\n"
     ]
    }
   ],
   "source": [
    "print('AUCROC smax: {0}'.format(sklearn.metrics.roc_auc_score(\n",
    "            test.map(lambda lp: lp.label).collect(),\n",
    "            test.map(lambda lp: lp.features[0]).collect()\n",
    ")))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[u'2016-08-17\\t01beton.ru\\t96\\t0\\t-686797',\n",
       " u'2016-08-17\\t023.by[1]full\\t66\\t0\\t-649375',\n",
       " u'2016-08-17\\t03.ru[1]genetics\\t79\\t0\\t-667329',\n",
       " u'2016-08-17\\t04141.com.ua[0]news\\t56\\t0\\t-632972',\n",
       " u'2016-08-17\\t04kv.com[1]avr\\t69\\t0\\t-653813']"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "a = sc.textFile(\"/user/kposminin/up_20160817.txt\")\n",
    "a.take(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
